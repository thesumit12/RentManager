apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.2"
    reportsDir = file("$buildDir/reports")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running live debug tests."

    reports {
        xml.enabled = true
        html.enabled = true
    }

    // what to exclude from coverage report
    // UI, "noise", generated classes, platform classes, etc.
    def excludes = [
            '**/R.class',
            '**/BR.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/Room*.*',
            '**/*_Impl.*',
            '**/DataBaseModule*',
            '**/MVVMComponent.*',
            '**/Dagger*',
            '**/*Factory.*',
            '**/view/**/*.*',
            '**/ui/**/*.*',
            '**/*Activity.*',
            '**/*Activity$*.class',
            '**/*Service.*',
            '**/*Service$*.class',
            '**/*ViewHolder.*',
            '**/*ViewHolder$*.class',
            '**/*Decoration.*',
            '**/*Decoration$*.class',
            '**/*Handler.*',
            '**/*Handler$*.*',
            '**/*Adapter.*',
            '**/*Adapter$*.class',
            '**/*Fragment.*',
            '**/*Fragment$*.class',
            // View related classes, will be covered in Integration Tests
            '**/Router.class',
            '**/Router$*.class'
    ]

    // generated classes
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: excludes)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/Debug", excludes: excludes)

    additionalClassDirs files([debugTree], [kotlinDebugTree])

    def coverageSourceDirs = [
            android.sourceSets.main.java.srcDirs,
            "src/main/kotlin"
    ]
    additionalSourceDirs files(coverageSourceDirs)
    executionData fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec", //we use "debug" build type for test coverage (can be other)
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

tasks.whenTaskAdded {task ->
    if(!fullBuild){
        if(task.name.contains("test") || task.name.contains("Test")) {
            task.enabled = true
        }
    }
}