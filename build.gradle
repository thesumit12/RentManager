// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: "java"
buildscript {
    ext.kotlin_version = '1.3.30'
    ext {
        fullBuild = true
        minSdkVersion = 22
        targetSdkVersion = 28
        compileSdkVersion = 28
        kotlinJDKVersion = "8"
        gradleBuildVersion = '3.3.2'
        detektBuildVersion = "1.0.0-RC12"
        kotlinPluginVersion = "1.3.21"
        lifecycleExtensionVersion = "2.0.0"
        kotlinKoinVersion = "1.0.2" // latest.release not picking stable version
        leakCanaryVersion = "1.6.3" // latest.release not picking stable version
        // Will contain all support library dependencies
        sharedSupportLibraries = { dependencyHandler ->
            delegate = dependencyHandler

            implementation 'androidx.appcompat:appcompat:latest.release'
            implementation 'androidx.core:core-ktx:latest.release'
            implementation 'androidx.constraintlayout:constraintlayout:latest.release'
            implementation 'com.google.android.material:material:latest.release'

        }
    }
    repositories {
        google()
        maven {
            url 'https://maven.google.com/'
        }
        maven {
            url "http://central.maven.org/maven2/"
        }
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://maven.fabric.io/public"
        }
        
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$gradleBuildVersion"
        //classpath "com.gradle:build-scan-plugin:latest.release"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinPluginVersion"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektBuildVersion"
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:latest.release"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version" //for documentation
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url "http://central.maven.org/maven2/"
        }
    }
}

apply plugin: "io.gitlab.arturbosch.detekt"

configurations {
    ktlint
}

dependencies {
    ktlint "com.github.shyiko:ktlint:latest.release"
    detekt "io.gitlab.arturbosch.detekt:detekt-formatting:latest.release"
    detekt "io.gitlab.arturbosch.detekt:detekt-cli:latest.release"
}

detekt {
    toolVersion = "$detektBuildVersion"
    input = files("$projectDir")
    parallel = true
    config = files("$rootDir/detekt.yml")
    filters = ".*/dependencymanager/.*,.*/resources/.*,.*/tmp/.*,.*/poc/.*"
}

gradle.projectsEvaluated {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            jvmTarget = "1.8"
            allWarningsAsErrors = true
        }
    }
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt !src/**/*Test.kt !src/**/dependencymanager/*.kt !*poc*"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}

check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}
tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    forkEvery = 100
}
tasks.withType(JavaCompile) {
    options.incremental = true
}

afterEvaluate {
    tasks.matching {
        it.name.startsWith('dex')
    }.each { dx ->
        if (dx.additionalParameters == null) {
            dx.additionalParameters = ['--multi-dex']
        } else {
            dx.additionalParameters += '--multi-dex'
        }
    }
}

apply from: "gradle/checkstyle.gradle"


apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.2"
    reportsDir = file("$buildDir/reports")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}


task generateJacocoCompleteReport(type: JacocoReport) {

    sourceDirectories = files()
    classDirectories = files()
    executionData = files()

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    // Work-around to allow us to build list of executionData files in doFirst
    onlyIf = {
        true
    }

    // what to exclude from coverage report
    // UI, "noise", generated classes, platform classes, etc.
    def excludes = [
            '**/R.class',
            '**/BR.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/Room*.*',
            '**/*_Impl.*',
            '**/DataBaseModule*',
            '**/MVVMComponent.*',
            '**/Dagger*',
            '**/*Factory.*',
            '**/view/**/*.*',
            '**/ui/**/*.*',
            '**/*Activity.*',
            '**/*Activity$*.class',
            '**/*Service.*',
            '**/*Service$*.class',
            '**/*ViewHolder.*',
            '**/*ViewHolder$*.class',
            '**/*Decoration.*',
            '**/*Decoration$*.class',
            '**/*Handler.*',
            '**/*Handler$*.*',
            '**/*Adapter.*',
            '**/*Adapter$*.class',
            '**/*Fragment.*',
            '**/*Fragment$*.class',
            '**/*Receiver.*',
            '**/*Receiver$*.class',
            // View related classes, will be covered in Integration Tests
            '**/Router$*.class',
    ]

    /*
     * Builds list of source dirs, class dirs, and executionData files
     * when task is run, not at script evaluation time
     */
    doFirst {
        println("Root level - jacocoTestReport")
        subprojects.findAll { subproject ->
            subproject.pluginManager.hasPlugin('jacoco')
        }.each { subproject ->
            println("Getting files for - ${subproject.name}")
            additionalSourceDirs files((Set<File>) subproject.android.sourceSets.main.java.srcDirs)

            def debugTree = fileTree(dir: "${subproject.buildDir}/intermediates/classes/debug", excludes: excludes)
            def kotlinDebugTree = fileTree(dir: "${subproject.buildDir}/tmp/kotlin-classes/debug", excludes: excludes)

            additionalClassDirs files([debugTree], [kotlinDebugTree])
            executionData subproject.tasks.jacocoTestReport.executionData
        }

        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}